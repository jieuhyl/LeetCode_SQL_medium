#====
1350. Students With Invalid Departments
select id, name
from students
where department_id not in (select id from departments);


#====
1068. Product Sales Analysis I
select product_name, year, price
from Sales s
left join Product p
on s.product_id = p.product_id


#====
1303. Find the Team Size
select employee_id, tmp.cnt as 'team_size'
from employee as e
join (select team_id, count(distinct employee_id) cnt from employee group by team_id) as tmp
on e.team_id = tmp.team_id;


#====
1069. Product Sales Analysis II
select product_id, sum(quantity) total_quantity
from Sales
group by product_id


#====
511. Game Play Analysis I
select player_id, min(event_date) first_login
from Activity
group by player_id


#====
1251. Average Selling Price
select a.product_id, round(sum(a.price*b.units)/sum(b.units), 2) as average_price
from Prices as a
join UnitsSold as b
on a.product_id = b.product_id 
where b.purchase_date between a.start_date and a.end_date
group by a.product_id


#====
1179. Reformat Department Table
select id,
sum(case when month = 'Jan' then revenue else NULL end) as Jan_Revenue,
sum(case when month = 'Feb' then revenue else NULL end) as Feb_Revenue,
sum(case when month = 'Mar' then revenue else NULL end) as Mar_Revenue,
sum(case when month = 'Apr' then revenue else NULL end) as Apr_Revenue,
sum(case when month = 'May' then revenue else NULL end) as May_Revenue,
sum(case when month = 'Jun' then revenue else NULL end) as Jun_Revenue,
sum(case when month = 'Jul' then revenue else NULL end) as Jul_Revenue,
sum(case when month = 'Aug' then revenue else NULL end) as Aug_Revenue,
sum(case when month = 'Sep' then revenue else NULL end) as Sep_Revenue,
sum(case when month = 'Oct' then revenue else NULL end) as Oct_Revenue,
sum(case when month = 'Nov' then revenue else NULL end) as Nov_Revenue,
sum(case when month = 'Dec' then revenue else NULL end) as Dec_Revenue
from Department
group by id;


#====
1173. Immediate Food Delivery I
select
     round(sum(case when order_date = customer_pref_delivery_date then 1 else 0 end)/count(delivery_id)*100 ,2)
     as 'immediate_percentage'
from Delivery


#====
595. Big Countries
select name, population, area
from World
where population > 25000000 or area > 3000000;


#====
613. Shortest Distance in a Line
select min(abs(a.x - b.x)) as shortest 
from Point a, Point b 
where a.x != b.x;


#====
1148. Article Views I
select author_id id
from views
where author_id = viewer_id
group by author_id
having count(distinct article_id) >=1
order by id asc


#====
627. Swap Salary
update salary
    set sex = (case when sex = 'm'
              then 'f'
              else 'm'
              end)


#====
1082. Sales Analysis I
select seller_id
from Sales
group by seller_id
having sum(price) = (select sum(price) s
                    from Sales
                    group by seller_id
                    order by s desc
                    limit 1 offset 0)


#====
1327. List the Products Ordered in a Period
select p.product_name, tmp.cnt as 'unit'
from products p
right join 
(select product_id, sum(unit) cnt
    from Orders
    where order_date between '2020/02/01' and '2020/02/29'
    group by product_id
    having sum(unit) >= 100) as tmp
on p.product_id = tmp.product_id;


#====
1050. Actors and Directors Who Cooperated At Least Three Times
select actor_id, director_id
from ActorDirector
group by actor_id, director_id
having count(*) >2


#====
586. Customer Placing the Largest Number of Orders
select customer_number
from orders
group by customer_number
having count(order_number) = (select count(order_number)
                             from orders
                             group by customer_number
                             order by count(*) desc
                             limit 1
                             )


#====
1241. Number of Comments per Post
SELECT s1.sub_id as post_id, COUNT(distinct s2.sub_id) as number_of_comments
FROM submissions s1
LEFT JOIN submissions s2
ON s1.sub_id = s2.parent_id
WHERE s1.parent_id IS NULL
GROUP BY s1.sub_id


#====
584. Find Customer Referee
select name
from customer
where referee_id <> 2 or referee_id is null


#====
1280. Students and Examinations
SELECT s.student_id, s.student_name, s.subject_name, COUNT(a.subject_name) attended_exams 
FROM
examinations a
RIGHT JOIN
(SELECT * FROM students, subjects) s
ON a.student_id = s.student_id AND a.subject_name = s.subject_name
GROUP BY s.student_id, s.subject_name
ORDER BY student_id, subject_name


#====
1211. Queries Quality and Percentage
select query_name, 
       round(sum(rating/position)/count(result),2) as "quality",
       round(sum(case when rating<3 then 1 else 0 end)/count(result)*100,2) as "poor_query_percentage"
from Queries
group by query_name


#====
620. Not Boring Movies
select *
from cinema
where id %2=1 and description <> 'boring'
order by rating desc


#====
577. Employee Bonus
select name, bonus
from Employee as e
left join Bonus as b
on e.empId = b.empId
where bonus< 1000 or bonus is null


#====
1294. Weather Type in Each Country
select c.country_name, tmp.weather_type
from
(select country_id,
    case when sum(weather_state)/count(country_id) <= 15 then 'Cold'
         when sum(weather_state)/count(country_id) >= 25 then 'Hot'
         else 'Warm' end as weather_type
from Weather 
where Year(day) = 2019 and Month(day) = 11
group by country_id) as tmp
join countries c
on tmp.country_id = c.country_id


#====
610. Triangle Judgement
select x,y,z,
    case when
        x+y>z and x+z>y and y+z>x
        then 'Yes' else 'No' end as triangle
from triangle


#====
1075. Project Employees I
select project_id, round(avg(experience_years),2) as average_years
from Project as p
left join Employee as e
on p.employee_id = e.employee_id
group by project_id


#====
1113. Reported Posts
select extra report_reason, count(distinct post_id) report_count
from Actions
where action_date = DATE_SUB('2019-07-05', interval 1 day) and action = 'report'
group by extra;


#====
603. Consecutive Available Seats
select seat_id from
cinema
where
free=1 and
(seat_id+1 in (select seat_id from cinema where free=1)
or seat_id-1 in (select seat_id from cinema where free=1))


#====
607. Sales Person
select name
from salesperson
where sales_id not in (select s.sales_id 
                       from  orders as o
                      left join company as c
                       on o.com_id = c.com_id
                       left join salesperson s
                       on o.sales_id = s.sales_id
                       where c.name = 'RED'
                      )


#====
182. Duplicate Emails
select Email
from Person 
group by Email
having count(Email) >1


#====
1322. Ads Performance
select tmp.ad_id, coalesce(round(100*c/t,2), 0.00) ctr
from
(select ad_id,
    sum(case when action = 'Clicked' then 1 else 0 end) c,
    sum(case when action != 'Ignored' then 1 else 0 end) t
from ads
group by ad_id) as tmp
order by ctr desc, ad_id asc;


#====
175. Combine Two Tables
select a.FirstName, a.LastName, b.City, b.State
from Person a
left join Address b
on a.PersonId = b.PersonId;


#====
1084. Sales Analysis III
SELECT Product.product_id, Product.product_name
FROM Product
WHERE product_id NOT IN (SELECT product_id FROM Sales WHERE sale_date NOT BETWEEN '2019-01-01' AND '2019-03-31');


#====
512. Game Play Analysis II
select t.player_id, a.device_id
from
(select player_id, min(event_date) d 
from Activity
group by player_id) as t,
Activity as a
where t.player_id = a.player_id and t.d = a.event_date


#====
1141. User Activity for the Past 30 Days I
SELECT activity_date AS day, COUNT(DISTINCT user_id) AS active_users
FROM Activity
WHERE activity_date BETWEEN DATE_SUB(DATE("2019-07-27"), INTERVAL 29 DAY) AND DATE("2019-07-27") 
GROUP BY activity_date;


#====
181. Employees Earning More Than Their Managers
select a.Name as Employee
from Employee as a, Employee as b
where a.ManagerId = b.Id and a.Salary > b.Salary


#====
1076. Project Employees II
select project_id
from Project
group by project_id
having count(employee_id) = (select count(employee_id) s
                            from Project
                            group by project_id
                            order by s desc
                            limit 1 offset 0)


#====
1083. Sales Analysis II
select distinct s.buyer_id
from Sales s
left join Product p
on s.product_id = p.product_id
where p.product_name = 'S8' and s.buyer_id not in (select distinct s.buyer_id
                                                from Sales s
                                                left join Product p
                                                on s.product_id = p.product_id
                                                where p.product_name = 'iPhone')


#====
183. Customers Who Never Order
select Name as Customers 
from Customers
where Id not in (select CustomerID from orders)


#====
619. Biggest Single Number
select ifnull((select num
from my_numbers
group by num
having count(*) = 1
order by num desc
limit 1 offset 0), null) as num


#====
597. Friend Requests I: Overall Acceptance Rate
select coalesce(round
               (count(distinct requester_id, accepter_id)
               /
               count(distinct sender_id, send_to_id),2),0)
               as accept_rate
               from friend_request, request_accepted


#====
196. Delete Duplicate Emails
delete p1
from Person as p1, Person as p2
where p1.Id > p2.Id and p1.Email = p2.Email


#====
596. Classes More Than 5 Students
select class
from courses
group by class
having count(distinct student) >=5


#====
197. Rising Temperature
select w1.Id
from Weather w1, Weather w2
where w1.RecordDate = date_sub(w2.RecordDate, interval -1 day) and w1.Temperature > w2.Temperature


#====
1142. User Activity for the Past 30 Days II
select coalesce(round(count(distinct session_id)/count(distinct user_id),2),0.00) as average_sessions_per_user
from Activity
where activity_date between date_sub(date('2019-07-27'), interval 29 day) and date('2019-07-27')


#====
176. Second Highest Salary
select coalesce((select distinct Salary
                from Employee
                order by Salary desc
                limit 1 offset 1), null) 'SecondHighestSalary';


#====
1378. Replace Employee ID With The Unique Identifier
select name, unique_id
from employees e
left join employeeuni em
on e.id = em.id;
